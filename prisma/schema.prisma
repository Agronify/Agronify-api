datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Knowledge {
  id        Int      @id @default(autoincrement())
  image     String
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Crop {
  id          Int           @id @default(autoincrement())
  image       String
  name        String
  type        String
  is_fruit    Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  CropDisease CropDisease[]
  MLModel     MLModel[]
}

model CropDisease {
  id          Int          @id @default(autoincrement())
  image       String
  crop_id     Int
  crop        Crop         @relation(fields: [crop_id], references: [id])
  name        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  ModelClass  ModelClass[]
}

model MLModel {
  id          Int          @id @default(autoincrement())
  crop        Crop         @relation(fields: [crop_id], references: [id])
  crop_id     Int
  name        String
  type        String
  file        String
  active      Boolean      @default(false)
  inputWidth  Int?
  inputHeight Int?
  classAmount Int?
  normalize   Boolean      @default(false)
  threshold   Float?       @default(90)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  ModelClass  ModelClass[]
}

model ModelClass {
  id         Int          @id @default(autoincrement())
  mlmodel    MLModel      @relation(fields: [mlmodel_id], references: [id], onDelete: Cascade)
  mlmodel_id Int
  disease    CropDisease? @relation(fields: [disease_id], references: [id], onDelete: SetNull)
  disease_id Int?
  index      Int
  ripe       Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String?
  is_admin  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
